from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

# Example parameters (replace with your actual values)
# n = 1234567890
# e = 65537
# d = 1234567890
# p = 1234567
# dp = 1234567
# dq = 1234567
# p = 7919
# q = 7907
# n = 62615533
# e = 65537
# d = 22993121
# n = 3233
# p = 61
# q = 53
# e = 17
# d = 413
# p = 141461
# q = 141443
# n = 20008668223
# e = 65537
# d = 8288106573
hexn = "00B559B114201A223510E609940E449F74ED3A9638CD1E028329DB47D5E26ED6C5BB93E0E0F9AE711936159E2B074BAA971A006E9929A10425132C8330F9D43921F6853285F2521C7CE5A3435563BF35E02F48CA35DD6BD1643A8814A1DBDFA6CEDC0C8A0CAF7FD60BE0EF4B867572BD9852C1144E5ACF30F6CB7F30879EF1A2D3F8D34FE8E45C02A3BEAAAF0BE9053963127B464AF38DDB5ECC9898F130DA35FDB80B68F0BA9EB2832E39A98BA7FE35DA6F3055870831673714381C1CB3D713E1E757D461B827EAC1EFDAD3FAACEF2CDCBA668B89D1983F81B44C75758DD1BB2ABD5526B23A645500554E162F56ADC9817CED96B35A780DD25AD5A674DBF182BD"
hexd = "01FB9496227E45C3A360139890E2D05A0D0EB71E22966B6155AEBC6021F7D551942DA232429B3FBA79245288214A8A304AE6D87960F0C6ED92F4108D053958A2E5D72E23179AAD0DABBF6768DD2C840A3213ED92B6781D475201489921A8245B8C7668F7A609E57602F409EDEF542F20DE8532F3B83F2C0EAE42F3185AB8A88C0A6B43521563611DBD48560A022C383641A09AE946D17CE10C26F58DDDB6E48CDC902B079F5CF04DC5F451F91D40D3228EA0F1F87FC0CDEC566BF1CE61EC2E1611FD8FF548FA603F98D022F667B49799DDBDF83DB32737E60121151C8876977423B056A8A8CD08CE75CAA6822A2778E5BFDCC3DE5FFB3123ED7E4CEA5BE80D69"
hexe = "010001"
hexp = "00CBAF8B426B773C414F377E0D5F6F46A9DD01C44DFBEE3A71951FAB54BDB8891B743243B7D057C8F3DD136C81B6885621E593572CC7003254D61371FABBF4CD110C6A448CA32468061C4B58332E995497924E8E20A13797AD95AE918642EC173FA593189766EA705B162B4E0DAC47E8F0DC866BB9D7B8EEA0357A932759C429F9"
hexq = "00E3ED95A9D765ABE9D49A30440AB0B2276AD174373378F3C0C622200522B88A76E6EA59D3B6EFA08CB6C075B5F39611A4A25D27708DE0FBF2443C391DA61AB4220F1CDC2CFED3233B1D5D3F39BB9C0CB9BEB9B4445B8C55932F2B5DB72C5334A48C81B5C741D3699FE1D634FFB22138B93E5FDC40FD846F6455E24C5744AD6FE5"
n = int(hexn, 16)
e = int(hexe, 16)
d = int(hexd, 16)
p = int(hexp, 16)
q = int(hexq, 16)



#creating tuple
#public_tuple_params = (n, e, d, p, q)
public_tuple_params = (n, e)
private_tuple_params = (n, e, d, p, q)

# Create an RSA key object
public_key = RSA.construct(public_tuple_params)
private_key = RSA.construct(private_tuple_params)
# Example ciphertext (replace with your actual ciphertext)
plaintext = "testing 123"
bytes_plaintext = plaintext.encode('utf-8')
cipher_rsa = PKCS1_OAEP.new(public_key)
ciphertext = cipher_rsa.encrypt(bytes_plaintext)
print(ciphertext)


# Decrypt the ciphertext
cipher_rsa = PKCS1_OAEP.new(private_key)
bytes_plaintext = cipher_rsa.decrypt(ciphertext)
plaintext = bytes_plaintext.decode('utf-8')
print("Decrypted plaintext:", plaintext)

