from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes



def encryptWith(plaintext, n, e):
    public_tuple_params = (n, e)
    # Create an RSA key object
    public_key = RSA.construct(public_tuple_params)
    bytes_plaintext = plaintext.encode('utf-8')
    cipher_rsa = PKCS1_OAEP.new(public_key)
    ciphertext = cipher_rsa.encrypt(bytes_plaintext)
    return ciphertext

def decryptWith(ciphertext, n, e, d, p, q):
    private_tuple_params = (n, e, d, p, q)
    # Create an RSA key object
    private_key = RSA.construct(private_tuple_params)
    # Serialize keys to PEM format
    pem = private_key.export_key('PEM')
    print(pem.decode())
    # Decrypt the ciphertext
    cipher_rsa = PKCS1_OAEP.new(private_key)
    bytes_plaintext = cipher_rsa.decrypt(ciphertext)
    plaintext = bytes_plaintext.decode('utf-8')
    return plaintext

def exportPrivateKey(outputpath, n, e, d, p, q):
    private_tuple_params = (n, e, d, p, q)
    # Create an RSA key object
    private_key = RSA.construct(private_tuple_params)
    # Serialize keys to PEM format
    #pem = private_key.export_key('PEM')
    pem = private_key.export_key()
    try:
        with open(outputpath, "wb") as f:
            f.write(pem)
    except IOError as e:
        print("There was an error writing to the file")

def main():
    print("RSA example 2")
    #hexn = "00B559B114201A223510E609940E449F74ED3A9638CD1E028329DB47D5E26ED6C5BB93E0E0F9AE711936159E2B074BAA971A006E9929A10425132C8330F9D43921F6853285F2521C7CE5A3435563BF35E02F48CA35DD6BD1643A8814A1DBDFA6CEDC0C8A0CAF7FD60BE0EF4B867572BD9852C1144E5ACF30F6CB7F30879EF1A2D3F8D34FE8E45C02A3BEAAAF0BE9053963127B464AF38DDB5ECC9898F130DA35FDB80B68F0BA9EB2832E39A98BA7FE35DA6F3055870831673714381C1CB3D713E1E757D461B827EAC1EFDAD3FAACEF2CDCBA668B89D1983F81B44C75758DD1BB2ABD5526B23A645500554E162F56ADC9817CED96B35A780DD25AD5A674DBF182BD"
    #hexd = "01FB9496227E45C3A360139890E2D05A0D0EB71E22966B6155AEBC6021F7D551942DA232429B3FBA79245288214A8A304AE6D87960F0C6ED92F4108D053958A2E5D72E23179AAD0DABBF6768DD2C840A3213ED92B6781D475201489921A8245B8C7668F7A609E57602F409EDEF542F20DE8532F3B83F2C0EAE42F3185AB8A88C0A6B43521563611DBD48560A022C383641A09AE946D17CE10C26F58DDDB6E48CDC902B079F5CF04DC5F451F91D40D3228EA0F1F87FC0CDEC566BF1CE61EC2E1611FD8FF548FA603F98D022F667B49799DDBDF83DB32737E60121151C8876977423B056A8A8CD08CE75CAA6822A2778E5BFDCC3DE5FFB3123ED7E4CEA5BE80D69"
    #hexe = "010001"
    #hexp = "00CBAF8B426B773C414F377E0D5F6F46A9DD01C44DFBEE3A71951FAB54BDB8891B743243B7D057C8F3DD136C81B6885621E593572CC7003254D61371FABBF4CD110C6A448CA32468061C4B58332E995497924E8E20A13797AD95AE918642EC173FA593189766EA705B162B4E0DAC47E8F0DC866BB9D7B8EEA0357A932759C429F9"
    #hexq = "00E3ED95A9D765ABE9D49A30440AB0B2276AD174373378F3C0C622200522B88A76E6EA59D3B6EFA08CB6C075B5F39611A4A25D27708DE0FBF2443C391DA61AB4220F1CDC2CFED3233B1D5D3F39BB9C0CB9BEB9B4445B8C55932F2B5DB72C5334A48C81B5C741D3699FE1D634FFB22138B93E5FDC40FD846F6455E24C5744AD6FE5"
    #hexn = "00F19866D888741A853B88DE2B3970A4E2038BB42AD57D2B167542D248D00358E4C7DBDFE0505744EC2DA54B68DA271CE805063F89C1CFB764ADE045B7C5BFD82AED786F7B359F047A4208FD9652847441171005A9492EEEECE26B8837A3E4A0CBFCFB172F714E461F6889FC64E55F27761A39FAF7205F8CF03E3BFC257132AA54E3F3BE0CF6E90853310E8A77B7840EBB89D4A5C99596667CAE1A3F131E30C7702921FCEA639CCCDCBF26952CCA4CB71E5B263899A44FD0CD010D652EAF2E65B9A2F4329D8BD0D3637E970970356F833B3FC713594606A1F673F0677B8750C13054FE7DFA0978219217FF27C1DC9C847EC9B1D930ABA02D923912C5B308CC7D47"
    #hexe = "010001"
    #hexd = "02BB4B66655C92B430F12239F0E35229F00A53562CA5C6A7F159791133B0E5FF68371737ED109F89E0163F5D07226C143F824B939E2A60137657D3D1F91D6B2F491214889B199A2E5BB2C8533BC99D9AE2CCDE93846D506C433F1E022B0B39BA34B90E110E41E94F0F9A87CD083EE42E54AB9527D828DC6A16FA0CA6CBB9DBED262ADF514A185B5E3DFD107F19E17A6B7DE224244BC894594E1DEBA84B2036B9A53E6247C830A1514A83C82699BDFBE57323DE76A1D61030ACEC70EAABEF8CAEE47D8C8D380E367F4EC932D08500C98AD8C1A26409468BA7DB3779D3EF797275A9A64850006366FAB8536A37DE7837842CA565E29430F983334E975BD55BD789"
    #hexp = "00F5E7A19F5C36CA6B6167FCB981C5D2F369C42B522F4B0D025E9F68BE042DC3E23C0603DDF367F5972586391DCB16C26CF7252E45DA02AA158C2447B6388AD31EB2B24F0F4DBCAC08F3C5CAE22059F4FAA889E8083AF054FD7DD93DB29512468E2CF6EB96FC4EF2F680339F81C01ADE696187AD933434680235F45A1EA84BA345"
    #hexq = "00FB837AB023A0CECCBD946BD430B4CD3D234CEDB4933FE729FF98A05D1F5D3C42F7CF186E0BE005F0531F9C87F39BA6CF6F4B748FCCD3302284124845622DE55E12FF8AD9006F2B51CEB3ABD2E54D55B85E6A07D8961D3BE7BB3E884DD9EDA8E3C27A48B3A6C2729FFA8E31C856846ADF1C4E9B8EEE1315FFAA0EA4C84BE3011B"
    hexe = "010001"
    hexd = "61ced7649647ea0105349dbf117098695700730cb9088afc6dfed2dd96edca7eb1c959526ba712951039110b54fd385f5dcc579c838a71e7cd64c25557c46005ebe71a377dbb6c45747a16814560a537bd9dd252847867e9f71c7fadb979e6c4d282069d0a6d40125d79728a2b03488e8e756d04e6523d33affe1d36ee0fc0ce6bfbb5352a2748887c6d420204d10f0bd2583b0ef24872da00902ef9923af27c7358abbf9143f970c408e1879f5f953e89453917759077a15dadbc71bfb9116a05f81c3a8330d8f4245ca02a8bf5e7a3451f855d2103fd05ed7ba8ff813ac468adfa041ec905a295c71fb901aaaa811b87aa02652e74cdf5d255cb908c796bc1"
    hexp = "00e03e38a67037a8fe72e40a4085235336383defb89a38908ea80283bd4ae68b4b678e054d1e03fce51cf1363a015a2c86dcfb43a4b221ffdb38217cd8fc8b04abcba48cf276b6625cc44b208db4c99b36522d7fa32de1998d7b32350df01ba4d648a39fb9688b56b3a6ffbbe0dc188368bb1d241193b0485e6ea114053ddf9239"
    hexq = "00d7754a5c9d6e674df2c1cfec3060ba23a4219e83292d7b410bc994bf6b8c0739b079d8dd241979714a1cc11abe7dc3b6f99f69eec0b84c9f6c69776dbafe00653797a03773799343f09405226e33a36def88beca39575bc6498f26906ab30bcf260ca12830d051bc327ea31d8fc22c39039fcd7a1cf208b4ab8782202e890b17"
    
    
    #n = int(hexn, 16)
    e = int(hexe, 16)
    d = int(hexd, 16)
    p = int(hexp, 16)
    q = int(hexq, 16)
    n = p * q
    exportPrivateKey("private.pem", n, e, d, p, q)
    # Example ciphertext (replace with your actual ciphertext)
    # plaintext = "testing 123"
    # ciphertext = encryptWith(plaintext, n, e)
    try:
        with open("flag.txt.enc", 'rb') as file:
            ciphertext = file.read()
    except FileNotFoundError:
        print("file not found")
    plaintext = decryptWith(ciphertext, n, e, d, p, q)
    print("Decrypted plaintext:", plaintext)
    

if __name__ == "__main__":
    main()





